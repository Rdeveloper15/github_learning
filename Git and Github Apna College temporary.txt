git configuration: https://chatgpt.com/c/681f2516-a918-800f-b061-81b4467c38d2

rebase with another branch: https://docs.github.com/en/get-started/using-git/about-git-rebase

git log --merge     produce a log with a list of commits that conflict between the mergin branches.
git reset --mixed
git reset
git merge --abort

SSH VS HTTP

github certification exam: https://docs.github.com/en/get-started/showcase-your-expertise-with-github-certifications/registering-for-a-github-certifications-exam#about-identification-requirements

==============================================================================================================================================================================================================================

reset
git status: See differences between these trees.
git diff: See changes between working directory and staging.
git diff --cached: See changes between staging and last commit.
git reset: Move files between the trees (e.g., from staging back to working).
git checkout: Update working directory to match a commit.
git reset <hash> is take your branch behind till hash of commit, git checkout <hash> is not affect branch but create detached HEAD but reset move branch not detached hash.
git reset --soft <hash> or git reset --soft HEAD~1   => move your branch to this hash and remining code is place on staging area
git reset --mixed <hash> or git reset --mixed HEAD~1   => move your branch to this has and remining code is place on working area
git reset --hard <hash> or git reset --hard HEAD~1   => move your branch to this hash and remining code is remove completely
by default git reset pass --mixed if we don't pass any argument.
HEAD~1 = last commit's hash
HEAD~2 = section last commmit's hash
git reset --hard HEAD@{n}   reset till head@{n} current branch

revert
revert is safer undoing process,
revert is not move your current HEAD but it add new commit which is oposite of taget commit.
git revert <hash>   make new commit and open window for commit message which is contain reverse changes of following commit, here if any other commit after that commit is change on same line then merge conflict occuer.
after merge conflict occuer you have 3 options  skip, continue and abort
git revert -e <hash> or git revert --edit <hash> is default option
git revert --no-edit <hash>  will not open the editor.
git revert -n <hash> or git revert --no-commit <hash> revert the changes in staging area but not make commit

==============================================================================================================================================================================================================================

receives pull requests and merges by default (in hosted platforms like GitHub/GitLab).
is often used as the main development or production branch.
shown during git branch -a
remotes/origin/HEAD -> origin/main  ??

= remining topics

git log  =
git patch   =
git squash
SSH vs HTTP
git configuration
remove and restore

git reflog
git reset --hard HEAD@{1}
git reflog show refs/stash       reflog for stash

standard rebase = normal rebase
git rebase -i <branch> or git rebase --interactive <branch>     is rebase interactively,
git rebase --d 
git rebase --p 
git rebase --x 
git rebase --onto <newbase> <oldbase>,,  git rebase --onto main featureA featureB
