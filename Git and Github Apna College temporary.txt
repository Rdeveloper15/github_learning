git configuration: https://chatgpt.com/c/681f2516-a918-800f-b061-81b4467c38d2

git log --merge     produce a log with a list of commits that conflict between the mergin branches.
git merge --abort

github certification exam: https://docs.github.com/en/get-started/showcase-your-expertise-with-github-certifications/registering-for-a-github-certifications-exam#about-identification-requirements

==============================================================================================================================================================================================================================

revert
revert is safer undoing process,
revert is not move your current HEAD but it add new commit which is oposite of taget commit.
git revert <hash>   make new commit and open window for commit message which is contain reverse changes of following commit, here if any other commit after that commit is change on same line then merge conflict occuer.
after merge conflict occuer you have 3 options  skip, continue and abort
git revert -e <hash> or git revert --edit <hash> is default option
git revert --no-edit <hash>  will not open the editor.
git revert -n <hash> or git revert --no-commit <hash> revert the changes in staging area but not make commit

==============================================================================================================================================================================================================================

receives pull requests and merges by default (in hosted platforms like GitHub/GitLab).
is often used as the main development or production branch.
shown during git branch -a
remotes/origin/HEAD -> origin/main  ??

= remining topics

git log  =
git patch   =
SSH vs HTTP
git configuration
remove and restore

standard rebase = normal rebase
git rebase -i <branch> or git rebase --interactive <branch>     is rebase interactively,
git rebase --d 
git rebase --p 
git rebase --x 
git rebase --onto <newbase> <oldbase>,,  git rebase --onto main featureA featureB

==============================================================================================================================================================================================================================

24].git revert
= 'git revert' will create inverse changes of the commit.
= 'git revert HEAD' will revert of HEAD.
= 'git revert HEAD~1' or 'git revert HEAD@{1}' or 'git revert <hash>' will revert the particular commit.
= here if you went to revert the changes and that changes are not as itis then it will create a merge conflicts.
    like commit A: add line X+1 to X+5, remove line Y+1 to Y+5 and change line Z+1 to Z+5 by Z+1 to Z+3., after that add new commit B and C.
    now revert A, 
        here if X+1 to X+5 are as itis then no problem it is just removed in revert commit.otherwise it leads to an merge conflict
        here if Y+1 to Y+5 are as itis removed and not add extra line between them then no problem it is just added in revert commit. otherwise it leads to an merge conflict
        here if Z+1 to Z+3 are as itis then no problem it is just removed and old 5 line are added in revert commit. otherwise it is leads to an merge conflict.
        in merge conflict you see the current changes and incoming changes.[current changes = changes that are currently exists, incoming changes=that revert commit try to apply]
        like X+3 is changed then current change = X+1 to X+5[X+3 is changed], incoming change=remove all 5 line and empty line as rremoved
        like Y+1 line is added current change = Y+1 line, incoming change=Y+1 to Y+5
        like Z+2 changed then current change = Z+1 to Z+3 with Z+2 is changed incoming change = remove Z+1 to Z+3 and add Z+1 to Z+5
=
= 'git revert <commit-hash-1> <commit-hash-2> <commit-hash-3>' revert one by one each commit
    during revert merge conflict you have 3 option
    git revert --abort = abort the all revert commit.
    git revert --skip = not create revert for this commit.
    git revert --continue = manually resolve the conflict and then git add . and then this will create revert commit for you and continue the revert process.
=
common option with revert.
    -e or --edit = default option, during revert it will open the nano editor which have default text for revert[revert this hash something], now write the commit message and then close the editor will create revert commit for you.
    --no-edit. => during revert not open the nano editor, for this default commit message   Revert "message of the original commit"   This reverts commit <hash of original commit>      as take commit message.
    -n or --no-commit => not make commit but revert changes added on staging area.

==============================================================================================================================================================================================================================
